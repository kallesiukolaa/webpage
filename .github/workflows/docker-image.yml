name: Docker Image CI

on:
    push:
        branches: ["main"]

jobs:
    builds:
        runs-on: ubuntu-latest

        steps:
            - name: Get Image Tag
              id: image-tag
              run: echo "::set-output name=image-tag-name::website-image-name-$(date +%s)"

            - uses: actions/checkout@v4
            - name: Build the Docker image
              env:
                IMAGE_TAG_NAME: ${{ steps.image-tag.outputs.image-tag-name }}
              run: docker build . -t $IMAGE_TAG_NAME

            - name: AWS login
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: eu-north-1

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                node-version: '18'

            - name: Install dependencies
              run: npm install glob

            - name: Execute sitemap generation script
              run: node generate-sitemap.js

            - name: Copy files to the s3 website content bucket
              run:
                aws s3 sync public s3://technarion-3-bucket-for-webpage/ --delete

            - name: Login to ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Push to ECR
              id: push-ecr
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG_NAME: ${{ steps.image-tag.outputs.image-tag-name }}
              run: docker image tag $IMAGE_TAG_NAME $ECR_REGISTRY/aws-repo-for-my-webpage:latest && docker push $ECR_REGISTRY/aws-repo-for-my-webpage:latest